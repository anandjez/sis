{"device": "None", "loss": -1100384110116864.0, "_timestamp": 1713169892.535754, "_runtime": 21.25264596939087, "_step": 0, "error": "Encountered an unexpected tracer. A function transformed by JAX had a side effect, allowing for a reference to an intermediate value with type uint32[2] wrapped in a DynamicJaxprTracer to escape the scope of the transformation.\nJAX transformations require that functions explicitly return their outputs, and disallow saving intermediate values to global state.\nThe function being traced when the value leaked was lossFn at /Users/ajgeorge/python/sis/stint_sampler/stint/sis.py:133 traced for jit.\n------------------------------\nThe leaked intermediate value was created on line /Users/ajgeorge/python/sis/stint_sampler/stint/sis.py:126:8 (generateTimeSteps). \n------------------------------\nWhen the value was created, the final 5 stack frames (most recent last) excluding JAX-internal frames were:\n------------------------------\n/Users/ajgeorge/python/sis/main.py:73:17 (main)\n/Users/ajgeorge/python/sis/stint_sampler/stint/sis.py:88:44 (train)\n/Users/ajgeorge/python/sis/stint_sampler/stint/sis.py:71:26 (opt_step)\n/Users/ajgeorge/python/sis/stint_sampler/stint/sis.py:135:16 (lossFn)\n/Users/ajgeorge/python/sis/stint_sampler/stint/sis.py:126:8 (generateTimeSteps)\n------------------------------\n\nTo catch the leak earlier, try setting the environment variable JAX_CHECK_TRACER_LEAKS or using the `jax.checking_leaks` context manager.\nSee https://jax.readthedocs.io/en/latest/errors.html#jax.errors.UnexpectedTracerError", "_wandb": {"runtime": 20}}